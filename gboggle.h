/* * File: gboggle.h * ----------------------------------------------------- * The gbogle.h file defines the interface for a set of routines that draw  * the boggle board and manage the word lists and scoreboard graphics. */ #ifndef _gboggle_h#define _gboggle_htypedef enum {Human, Computer} Player;    //players are identified by enum/* * Function: DrawBoard * Usage: DrawBoard(); * ----------------------------- * This function draws the empty layout of the board.  It should be called once at  * the beginning of each game, after using InitGraphics() to erase the graphics  * window.  It will re-draw the boggle cubes, board, and scores.  It resets the  * scores and word lists to zero for each player.  The boggle cubes are drawn with  * blank faces, ready for letters to be set using the LabelCube function. */void DrawBoard(void);/* * Function: LabelCube * Usage: LabelCube('D', 0, 3); * ---------------------------- * This function draws the specified letter on the face of the cube at position  * (row, col).  The cubes are numbered from top to bottom, left to right starting  * with zero. Therefore, the upper left corner is (0,0), lower right is (3,3).   * The above usage would put a D in the top right corner cube. */void LabelCube(char ch, int row, int col);/* * Function: HighlightCube * Usage: HighlightCube(2, 2, TRUE); * ------------------------------------- * This function highlights or unhighlights the cube specified by position (row, col).   * It is intended to be used to show which letters are used to form a given word on  * the boggle board. The highlighting will invert the specified cube to draw attention  * to it. The "lit" parameter determines whether you are drawing the darkened cube or  * erasing it.  TRUE indicates the dark cube should be drawn, FALSE indicates the dark  * cube should be erased. */void HighlightCube(int row, int col, bool lit);/* * Function: RecordWordForPlayer * Usage: RecordWordForPlayer("fruitfly", Human); * --------------------------------------------- * This function draws the new word added to the player's word list display and  * updates the scoreboard accordingly.  The two players are identified by the  * enumerated type Player (see tyedef above) Scoring is calculated this way:  a 4-letter  * word is worth 1 point, 5-letter is worth 2 points, and so on. */void RecordWordForPlayer(string word, Player playerNum);#endif